{
  "name": "Vulnerability Remediation Tracking",
  "nodes": [
    {
      "parameters": {
        "triggerType": "newVulnerabilities",
        "severityThreshold": "high",
        "pollingInterval": 15
      },
      "id": "cavelo-trigger",
      "name": "Cavelo Trigger",
      "type": "n8n-nodes-cavelo.caveloTrigger",
      "typeVersion": 1,
      "position": [240, 300],
      "notes": "Monitors for new high and critical vulnerabilities"
    },
    {
      "parameters": {
        "jsCode": "// Calculate risk score and remediation priority\nconst vulnerability = $input.first().json;\n\n// Calculate risk score based on CVSS score and asset criticality\nlet riskScore = vulnerability.cvssV3BaseScore || 0;\nlet priority = 'medium';\nlet slaDeadline = null;\n\n// Adjust risk score based on asset context\nif (vulnerability.hostname && vulnerability.hostname.includes('prod')) {\n  riskScore += 2; // Production assets get higher risk\n}\n\nif (vulnerability.hostname && vulnerability.hostname.includes('critical')) {\n  riskScore += 3; // Critical assets get even higher risk\n}\n\n// Determine priority and SLA based on risk score\nif (riskScore >= 9.0) {\n  priority = 'critical';\n  slaDeadline = new Date(Date.now() + 24 * 60 * 60 * 1000); // 24 hours\n} else if (riskScore >= 7.0) {\n  priority = 'high';\n  slaDeadline = new Date(Date.now() + 7 * 24 * 60 * 60 * 1000); // 7 days\n} else if (riskScore >= 4.0) {\n  priority = 'medium';\n  slaDeadline = new Date(Date.now() + 30 * 24 * 60 * 60 * 1000); // 30 days\n} else {\n  priority = 'low';\n  slaDeadline = new Date(Date.now() + 90 * 24 * 60 * 60 * 1000); // 90 days\n}\n\n// Generate remediation timeline\nconst remediationTimeline = {\n  discovery: new Date().toISOString(),\n  assessment: new Date(Date.now() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days\n  planning: new Date(Date.now() + 5 * 24 * 60 * 60 * 1000).toISOString(), // 5 days\n  implementation: slaDeadline.toISOString(),\n  verification: new Date(slaDeadline.getTime() + 2 * 24 * 60 * 60 * 1000).toISOString(), // 2 days after implementation\n  closure: new Date(slaDeadline.getTime() + 7 * 24 * 60 * 60 * 1000).toISOString() // 7 days after implementation\n};\n\n// Generate remediation summary\nconst remediationSummary = {\n  vulnerabilityId: vulnerability.vulnerabilityId,\n  title: vulnerability.title,\n  cvssScore: vulnerability.cvssV3BaseScore,\n  riskScore: Math.min(100, riskScore),\n  priority: priority,\n  slaDeadline: slaDeadline.toISOString(),\n  assetId: vulnerability.assetId,\n  hostname: vulnerability.hostname,\n  ipAddress: vulnerability.ipAddress,\n  affectedProducts: vulnerability.affectedProducts || [],\n  description: vulnerability.description,\n  remediationSteps: [\n    'Assess vulnerability impact and exploitability',\n    'Review available patches and updates',\n    'Plan remediation approach and timeline',\n    'Implement security controls or patches',\n    'Verify remediation effectiveness',\n    'Document remediation process and lessons learned'\n  ],\n  timeline: remediationTimeline,\n  status: 'open',\n  assignedTo: null,\n  createdDate: new Date().toISOString(),\n  lastUpdated: new Date().toISOString()\n};\n\nreturn remediationSummary;"
      },
      "id": "calculate-remediation-priority",
      "name": "Calculate Remediation Priority",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [460, 300],
      "notes": "Calculate risk score, priority, and SLA deadline for vulnerability remediation"
    },
    {
      "parameters": {
        "projectKey": "VULN",
        "issueType": "Bug",
        "summary": "{{ $json.priority.toUpperCase() }}: {{ $json.title }} - {{ $json.hostname }}",
        "description": "**Vulnerability Remediation Tracking**\n\n**Vulnerability Details:**\n- Title: {{ $json.title }}\n- CVSS Score: {{ $json.cvssScore }}\n- Risk Score: {{ $json.riskScore }}/100\n- Priority: {{ $json.priority.toUpperCase() }}\n- Asset: {{ $json.hostname }} ({{ $json.ipAddress }})\n- Affected Products: {{ $json.affectedProducts.join(', ') || 'N/A' }}\n\n**Description:**\n{{ $json.description }}\n\n**Remediation Timeline:**\n- Discovery: {{ $json.timeline.discovery }}\n- Assessment: {{ $json.timeline.assessment }}\n- Planning: {{ $json.timeline.planning }}\n- Implementation: {{ $json.timeline.implementation }}\n- Verification: {{ $json.timeline.verification }}\n- Closure: {{ $json.timeline.closure }}\n\n**SLA Deadline:** {{ $json.slaDeadline }}\n\n**Remediation Steps:**\n{{ $json.remediationSteps.map(step => '1. ' + step).join('\\n') }}\n\n**Status:** {{ $json.status.toUpperCase() }}\n**Created:** {{ $json.createdDate }}\n**Last Updated:** {{ $json.lastUpdated }}\n\n**Immediate Actions:**\n1. Assign to appropriate team member\n2. Review vulnerability details and impact\n3. Assess available patches and updates\n4. Plan remediation approach\n5. Implement security controls\n6. Verify remediation effectiveness\n7. Document process and lessons learned\n\n**Monitoring:**\n- Track progress against SLA deadline\n- Monitor for exploitation attempts\n- Update status regularly\n- Escalate if deadline at risk",
        "priority": "{{ $json.priority === 'critical' ? 'Highest' : $json.priority === 'high' ? 'High' : 'Medium' }}",
        "assignee": "security-team",
        "labels": [
          "vulnerability",
          "remediation",
          "{{ $json.priority }}",
          "{{ $json.hostname }}",
          "sla-tracking"
        ],
        "customFields": {
          "Vulnerability ID": "{{ $json.vulnerabilityId }}",
          "CVSS Score": "{{ $json.cvssScore }}",
          "Risk Score": "{{ $json.riskScore }}",
          "Priority": "{{ $json.priority }}",
          "Asset Hostname": "{{ $json.hostname }}",
          "Asset IP": "{{ $json.ipAddress }}",
          "SLA Deadline": "{{ $json.slaDeadline }}",
          "Status": "{{ $json.status }}",
          "Created Date": "{{ $json.createdDate }}",
          "Last Updated": "{{ $json.lastUpdated }}"
        }
      },
      "id": "create-remediation-ticket",
      "name": "Create Remediation Ticket",
      "type": "n8n-nodes-base.jira",
      "typeVersion": 2,
      "position": [680, 300],
      "notes": "Create Jira ticket for vulnerability remediation tracking"
    },
    {
      "parameters": {
        "channel": "#vulnerability-alerts",
        "text": "ðŸ”§ **Vulnerability Remediation Required**\n\n**Vulnerability:** {{ $json.title }}\n**CVSS Score:** {{ $json.cvssScore }}\n**Risk Score:** {{ $json.riskScore }}/100\n**Priority:** {{ $json.priority.toUpperCase() }}\n**Asset:** {{ $json.hostname }} ({{ $json.ipAddress }})\n**SLA Deadline:** {{ $json.slaDeadline }}\n\n**Description:**\n{{ $json.description }}\n\n**Remediation Steps:**\n{{ $json.remediationSteps.map(step => 'â€¢ ' + step).join('\\n') }}\n\n**Timeline:**\n- Assessment: {{ $json.timeline.assessment }}\n- Planning: {{ $json.timeline.planning }}\n- Implementation: {{ $json.timeline.implementation }}\n- Verification: {{ $json.timeline.verification }}\n\n**Immediate Actions:**\nâ€¢ Assign to appropriate team member\nâ€¢ Review vulnerability details and impact\nâ€¢ Assess available patches and updates\nâ€¢ Plan remediation approach\nâ€¢ Implement security controls\nâ€¢ Verify remediation effectiveness\n\n**Jira Ticket:** [VULN-{{ $json.vulnerabilityId }}]({{ $json.jiraUrl }})",
        "blocks": []
      },
      "id": "send-remediation-alert",
      "name": "Send Remediation Alert",
      "type": "n8n-nodes-base.slack",
      "typeVersion": 2,
      "position": [900, 300],
      "notes": "Send Slack alert for vulnerability remediation"
    },
    {
      "parameters": {
        "jsCode": "// Generate remediation tracking data\nconst remediation = $input.first().json;\n\n// Create remediation tracking record\nconst trackingRecord = {\n  vulnerabilityId: remediation.vulnerabilityId,\n  title: remediation.title,\n  cvssScore: remediation.cvssScore,\n  riskScore: remediation.riskScore,\n  priority: remediation.priority,\n  slaDeadline: remediation.slaDeadline,\n  status: remediation.status,\n  assetId: remediation.assetId,\n  hostname: remediation.hostname,\n  ipAddress: remediation.ipAddress,\n  affectedProducts: remediation.affectedProducts,\n  description: remediation.description,\n  remediationSteps: remediation.remediationSteps,\n  timeline: remediation.timeline,\n  assignedTo: remediation.assignedTo,\n  createdDate: remediation.createdDate,\n  lastUpdated: remediation.lastUpdated,\n  jiraTicketId: 'VULN-' + remediation.vulnerabilityId,\n  jiraUrl: 'https://company.atlassian.net/browse/VULN-' + remediation.vulnerabilityId,\n  progress: {\n    assessment: false,\n    planning: false,\n    implementation: false,\n    verification: false,\n    closure: false\n  },\n  milestones: [\n    {\n      name: 'Assessment',\n      deadline: remediation.timeline.assessment,\n      completed: false,\n      description: 'Assess vulnerability impact and exploitability'\n    },\n    {\n      name: 'Planning',\n      deadline: remediation.timeline.planning,\n      completed: false,\n      description: 'Plan remediation approach and timeline'\n    },\n    {\n      name: 'Implementation',\n      deadline: remediation.timeline.implementation,\n      completed: false,\n      description: 'Implement security controls or patches'\n    },\n    {\n      name: 'Verification',\n      deadline: remediation.timeline.verification,\n      completed: false,\n      description: 'Verify remediation effectiveness'\n    },\n    {\n      name: 'Closure',\n      deadline: remediation.timeline.closure,\n      completed: false,\n      description: 'Document remediation process and lessons learned'\n    }\n  ],\n  alerts: [\n    {\n      type: 'sla_warning',\n      message: 'SLA deadline approaching for vulnerability remediation',\n      threshold: 7, // days before deadline\n      sent: false\n    },\n    {\n      type: 'sla_critical',\n      message: 'SLA deadline critical for vulnerability remediation',\n      threshold: 1, // day before deadline\n      sent: false\n    },\n    {\n      type: 'sla_overdue',\n      message: 'SLA deadline overdue for vulnerability remediation',\n      threshold: 0, // after deadline\n      sent: false\n    }\n  ]\n};\n\nreturn trackingRecord;"
      },
      "id": "generate-tracking-record",
      "name": "Generate Tracking Record",
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [1120, 300],
      "notes": "Generate comprehensive remediation tracking record"
    }
  ],
  "connections": {
    "Cavelo Trigger": {
      "main": [
        [
          {
            "node": "Calculate Remediation Priority",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Calculate Remediation Priority": {
      "main": [
        [
          {
            "node": "Create Remediation Ticket",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Remediation Ticket": {
      "main": [
        [
          {
            "node": "Send Remediation Alert",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Send Remediation Alert": {
      "main": [
        [
          {
            "node": "Generate Tracking Record",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "tags": [],
  "triggerCount": 1,
  "updatedAt": "2024-01-15T10:00:00.000Z",
  "versionId": "1"
}